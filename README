ybigint big numbers library

DISCLAIMER

This code is by no means production able. Many checks aren't implemented (array bounds mostly) and the performance can
be disastrous in some cases. It is only meant as an algorithmic exercise.

The libray handles numbers for up to 512000 digits (500KiB) stored as static arrays.

Format & Arithmetic operations
---------------------

Initialization:

Addition:

Subtraction:

Multiplication:
	Ancient Egyptian algorithm,
	Karatsuba,
	Toom-Cook,
	Shonhage-Strassen
	
Division & modulo:

Power:

Factorial:

Document the library API
------------------------

+ void bigint_lib_init(u64 s);

          Initialize the random numbers generator with a seed.
     	  If the seed = 0 or seed = 1 then the library uses the PID by invoking getpid() .

+ bigint_t *bigint_init_z(u64 n);

	 Create a bigint initialized with n 0s.
	 
+ bigint_t *bigint_init_u(u64 v);

	 Create an unsigned/positive bigint initialized with v.
	 
+ bigint_t *bigint_init_i(i64 v);

  	 Create a signed or unsigned bigint initialized with v;
	 
+ bigint_t *bigint_init_r(u64 n);

	 Create an unsigned bigint initialized randomly.

+ bigint_t *bigint_init_s(u8 *s);

  	 Create a signed or unsigned bigint initialized with the string s. 

+ bigint_t *bigint_init_f(u8 *fname);

	 Create a signed or unsigned bigint initialized from a file.

+ u8 bigint_is_zero(bigint_t *a);

   	 Test if bigint is zero.
	 
+ u8 bigint_equal_u(bigint_t *a, bigint_t *b, i64 *pos);

     	 Test if two unsigned bigint values are equal.
	 
+ u8 bigint_equal_i(bigint_t *a, bigint_t *b, i64 *pos);

   	 Test if two signed or unsigned bigint values are equal.
   
+ u8 bigint_compare_u(bigint_t *a, bigint_t *b, i64 *pos);

   	 Compare two unsigned bigint values.

	 if (a = 0) return 0
	 if (a > b) return 1
	 if (a < b) return 2
	 
+ u8 bigint_compare_i(bigint_t *a, bigint_t *b, i64 *pos);

 	 Compare two signed or unsigned bigint values.

	 if (a = 0) return 0
	 if (a > b) return 1
	 if (a < b) return 2

+ void bigint_add_u(bigint_t *a, bigint_t *b, bigint_t *r);
+ void bigint_add_i(bigint_t *a, bigint_t *b, bigint_t *r);

         Unsigned and signed addition.

	 r = a + b.
	 
+ void bigint_sub_u(bigint_t *a, bigint_t *b, bigint_t *r);
+ void bigint_sub_i(bigint_t *a, bigint_t *b, bigint_t *r);

         Unsigned and signed subtraction.

	 r = a - b.
	 
+ void bigint_abs_i(bigint_t *b);

         Absolute value.

+ void bigint_mul_2(bigint_t *a, bigint_t *r);

         Multiply a bigint by 2 and store the result in r.

	 r = 2 * a.
	 
+ void bigint_mul_u(bigint_t *a, bigint_t *b, bigint_t *r);
+ void bigint_mul_i(bigint_t *a, bigint_t *b, bigint_t *r);

         Multilpy two unsigned or signed bigint values and store the result in r.

	 r = a * b.

+ void bigint_div_2(bigint_t *a, bigint_t *q, u8 *r);

         Divide a signed or unsigned bigint by 2;

	 a = a / 2;
	 r = a % 2;
	 
+ void bigint_div_i(bigint_t *a, bigint_t *b, bigint_t *q, bigint_t *r);

         Divide a signed or unsigned bigint by another.

	 q = a / b;
	 r = a % b:

+ void bigint_pow_n(bigint_t *a, u64 p, bigint_t *r);

         Exponentiation of a big number by an unsigned integer.

	 r = a^p

+ void bigint_pow_i(bigint_t *a, bigint_t *p, bigint_t *r);

         Exponentiation of a big number by a big number.

	 r = a^p
       
+ void bigint_fact_u(bigint_t *a, bigint_t *r);

         Calculate the factorial of a bigint and store the result in r.

+ void bigint_free(bigint_t **b);

         Release the memory allocated to a bigint.
	 

+ void bigint_print(bigint_t *b);
+ void bigint_print_signed(bigint_t *b);
+ void bigint_print_meta(bigint_t *b);
+ u8   bigint_print_file(bigint_t *b, FILE *fp);

Good practices & things to avoid
--------------------------------

Avoid using the same input bigint as output. Some of the library's functions already do that to save memory.

Performance tests
-----------------

